FORMAT: 1A
HOST: http://35.221.123.85:5000

# StoreAPI v1

- version: 1.0

店舗のメニューや注文を管理するためのAPIを定義する。

このAPIでは次の形式のデータを扱う。

- store
    - id: string
    - name: string
- item - Firestore
    - id: string
    - category_id: string
    - name: string
    - description: string
    - photo: object
        - url: string
    - price: number
- category
    - id: string
    - store_id: string
    - name: string
    - description: string
    - photo: object
        - url: string
- table
    - id: string
- group
    - id: string
    - table_id: string
    - state: string - "IN_STORE", "WAITING_PAYMENT" or "PAID"
- order - Firestore
    - id: string
    - items: object[]
        - item_id: string
        - count: number

# Group Payment 

## 決済処理をする [/v1/payment]

### お会計に対して決済を行う [POST]

決済フォームを情報を受け取って、バックエンドの決済APIにアクセスして決済を行います。

また、レスポンスには決済が完了したかを返すので、フロントではそれを利用してください。


+ Request (application/json)
    + Body

        {
            "amount": 4000,
            "userID": 83,
            "token": "tok_hogehoge"
        }
        
+ Response 200 (application/json)
    + Body

        {

        }


    

# Group Store 

## 注文やグループ情報など [/v1/store/{storeId}/groups{?tableId}]

## 入店時にGroupIDを取得する [GET]

`Group#state` を返す。
これが `"PAID"` だった場合は以前のグループの情報を取得してしまっていることになる。
その場合は新規の注文を許可せず、GroupIDの更新をユーザーに促す。

+ Parameters
    + tableId: vHTbfXPPgXFrHoXaeAG9eTxz (string) - tableIdをもとに現在のGroupのIDを返す

+ Response 200 (application/json)
    + Body
    
        {
            "error": "",
            "message": {
                "groupId": "UTHER4TwQEYJERUEwHNhrxjo",
                "storeId": "hogefugapiyo",
                "state": "IN_STORE"
            }
        }

+ Response 400 (application/json)
    リクエストフォーマットに関するエラーです。

    + Body
        {
            "error": {
                "statusCode": 400,
                "message": "Message about the error"
            }
        }

+ Response 500 (application/json)
    APIのデータベースに関するエラーです。

    + Body

        {
            "error": {
                "statusCode": 500,
                "message": "Message about the error"
            }
        }

### テーブルに対してGroup IDを発行する [POST]

テーブルに客が入れることを店員が確認した後に作成し、新しい客を受け入れる準備ができたことを明確にする。
決済が終了したテーブルの場合、客も自身でGroup IDを作成するかもしれない。
（店員が更新を忘れるかもしれないので）

+ Parameters
    + tableId: vHTbfXPPgXFrHoXaeAG9eTxz (string)

+ Response 200 (application/json)
    + Body

        {
            "error": "",
            "message": {
                "groupId": "UTHER4TwQEYJERUEwHNhrxjo"
            }
        }

## Item [/store/{storeId}/items]

### メニューを追加する [POST]

NOTE: ハッカソン中はデータベースに直箸で入れてしまえばいいので実装しなくても良い。

## Category [/store/{storeId}/categories]

### カテゴリーを追加する [POST]

NOTE: 同上

# Group LinePay

ここでは以下のような流れである。

```
Frontend -> Store API -> LINEPAY API(OAISO) -> LINE PAY API(LINE社) -> Store API -> LINE PAY API(LINE社) -> LFrontend
```

## 予約 [/v1/linepay/reserve]
### 予約を作成する [POST]

TODO: Example入力

+ Request

    + Body (application/json)

        {
            "amount":
            "item": 
            "orderID":
        }
        
+ Response

    + Body 

        {
            "error": "",
            "message": {
                "paymentURL": 
                "amount":
                "item": 
                "orderID":
            }
        }


## 承認 [/v1/linepay/confirm]
### 承認をする [GET]

LinePayの決済承認機能を提供する。LinePayAPI(LINE社)からアクセスを受け付ける)

TODO: この機能は本来は切り離すべき。

+ Response
    
    + Body (application/json)

        {
            "error": "",
            "message": {
                "groupId": "UTHER4TwQEYJERUEwHNhrxjo"
            }
        }